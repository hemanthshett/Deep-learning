from google.colab import drive
drive.mount('/content/drive')

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import Flatten
from keras.layers import MaxPooling2D
from keras.layers import Dense
import numpy as np

model=Sequential()
model.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(34,(5,5),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dense(130,activation='relu'))
model.add(Dense(115,activation='relu'))
model.add(Dense(1,activation='relu'))

model.compile(optimizer='adadelta',loss='binary_crossentropy',metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255, shear_range=0.2, zoom_range=0.4, horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/covid_data_updated/covid_data_updated/Train',target_size=(64,64),batch_size=10,class_mode='binary')
test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/covid_data_updated/covid_data_updated/test',target_size=(64,64),batch_size=10,class_mode='binary')

model.fit(training_set, steps_per_epoch = 20, epochs = 10)                               #steps_per_epoch is nothing but batch_size

test_loss, test_acc = model.evaluate(test_set, verbose=2)

print('\n\n')
print('Test Loss: \t', test_loss, '\n')
print('Test Accuracy: \t', test_acc, '\n')

import tensorflow as tf

resnet_model = Sequential()

pretrained_model = tf.keras.applications.ResNet50(include_top=False,               #include_top should be false to not again train the model
                                                  input_shape=(64,64,3),
                                                  pooling = 'avg',classes=2,
                                                  weights = 'imagenet')
for layer in pretrained_model.layers:
  layer.trainable=False                                                             #layer.trainable = False do not train the model again by resnet

resnet_model.add(pretrained_model)
resnet_model.add(Flatten())
resnet_model.add(Dense(512,activation='relu'))
resnet_model.add(Dense(1,activation='sigmoid'))

resnet_model.compile(optimizer='adadelta',loss='binary_crossentropy',metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255, shear_range=0.2, zoom_range=0.4, horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/covid_data_updated/covid_data_updated/Train',target_size=(64,64),batch_size=10,class_mode='binary')
test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/covid_data_updated/covid_data_updated/test',target_size=(64,64),batch_size=10,class_mode='binary')

resnet_model.fit(training_set, steps_per_epoch = 20, epochs = 10)

test_loss, test_acc = resnet_model.evaluate(test_set, verbose=2)

print('\n\n')
print('Test Loss: \t', test_loss, '\n')
print('Test Accuracy: \t', test_acc, '\n')

from tensorflow.keras.applications.vgg16 import VGG16
vgg_model = Sequential()
base_model = VGG16(weights='imagenet',include_top=False, input_shape=(64,64,3))
base_model.trainable = False
vgg_model.add(base_model)
vgg_model.add(Flatten())
vgg_model.add(Dense(512,activation='relu'))
vgg_model.add(Dense(1,activation='sigmoid'))

vgg_model.compile(optimizer='adadelta',loss='binary_crossentropy',metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255, shear_range=0.2, zoom_range=0.4, horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/covid_data_updated/covid_data_updated/Train',target_size=(64,64),batch_size=10,class_mode='binary')
test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/covid_data_updated/covid_data_updated/test',target_size=(64,64),batch_size=10,class_mode='binary')

vgg_model.fit(training_set, steps_per_epoch = 20, epochs = 10)

test_loss, test_acc = vgg_model.evaluate(test_set, verbose=2)

print('\n\n')
print('Test Loss: \t', test_loss, '\n')
print('Test Accuracy: \t', test_acc, '\n')

!pip install lime
import lime
from lime import lime_image

!pip install shap
import shap

#print(type(test_set))
tmp1, tmp2 = next(test_set)
background = shap.utils.sample(tmp1,5)
explainer = shap.DeepExplainer(model, background)

sample_index = np.random.randint(0, background.shape[0])
sample_image = background[sample_index]

!pip install lime shap
import shap
from skimage.segmentation import mark_boundaries

explainer = lime_image.LimeImageExplainer()
explanation = explainer.explain_instance(background[sample_index].astype('double'), model.predict, hide_color=0, num_samples=1000)

import matplotlib.pyplot as plt
plt.imshow(background[sample_index])
plt.title('Original Image')
plt.axis('off')
plt.show()

temp, mask = explanation.get_image_and_mask(explanation.top_labels[0], positive_only=True, num_features=5, hide_rest=False)
plt.imshow(mark_boundaries(temp, mask))
plt.title("LIME Explanation")
plt.show()
