import pandas as pd
import numpy as np
cancer = pd.read_csv("/content/drive/MyDrive/ovariantotal (1).csv")
cancer.head()

from google.colab import drive
drive.mount('/content/drive')

X=cancer.drop('TYPE',axis=1)
y=cancer['TYPE']

from sklearn import preprocessing
min_max_scaler = preprocessing.MinMaxScaler()
X_scale = min_max_scaler.fit_transform(X)
print(X_scale)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_scale,y,test_size=0.20,random_state=0)

from tensorflow import keras
from keras.models import Sequential
from keras.layers import LeakyReLU
from keras.layers import Dense
from tensorflow.keras.layers import Dropout

model = Sequential()
#model.add(Dropout(0.2, input_shape=(49,)))
#model.add(Dense(32,activation='relu'))
#LeakyReLU(alpha=0.01)
model.add(Dense(32, activation='relu', input_shape=(49,)))
model.add(Dropout(0.2))
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.2))

#Output layer
model.add(Dense(1, activation='sigmoid'))


model.compile(optimizer='sgd',
              loss='binary_crossentropy',
              metrics=['accuracy'])
model.fit(X_train, y_train,batch_size=32, epochs=2)


y_pred=model.predict(X_test)
y_pred
y_pred = np.where(y_pred > 0.5, 1, 0)
y_pred = y_pred.astype(int)
import numpy as np
np.column_stack((y_pred, y_test))
#print(y_pred>0.5)

from sklearn.metrics import confusion_matrix,classification_report,accuracy_score
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred))

y_pred=model.evaluate(X_test,y_test)[1]

!pip install lime
import lime
import lime.lime_tabular

from lime.lime_tabular import LimeTabularExplainer
explainer = LimeTabularExplainer(X.values,feature_names=X.columns.values.tolist(),class_names=['TYPE'],mode='regression')
# Now explain a prediction
exp = explainer.explain_instance(X.values[20], model.predict,num_features=5)

exp.as_pyplot_figure()
from matplotlib import pyplot as plt
plt.tight_layout()

exp.show_in_notebook(show_table=True)

pip install shapash

from shapash.explainer.smart_explainer import SmartExplainer
xpl = SmartExplainer(model)
xpl.compile(x=X_test)
xpl.plot.features_importance()
#features_importance.plot(top_n_features=10)

!pip install --upgrade scikit-learn

!pip install --upgrade shapash
